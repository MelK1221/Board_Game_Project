Development Plan Tracking

This file is intended as an internal reference to track steps for development of the Puzzles Tracking App project.

*** Development Goals ***

Stage 1:

* Learn Python basics and file I/O or JSON storage
* Build a simple CLI interface at first
* Add basic CRUD operations (Create, Read, Update, Delete)


Stage 2:

* FastAPI backend to serve and query puzzle data
* PostgreSQL to store the puzzle collection
* Simple frontend with HTML/JS
* Use SQLAlchemy as the ORM

Bonus idea: Integrate Neural Network to help recommend puzzles based on past ratings.


*** Development Steps ***

Phase 1:

1. Introduce entrypoint file with argument parsing, hard-coded list of Emily and Melanies favorite puzzles.
2. Add ability to load 'favorite puzzles' for a list of solvers from a file (CSV and JSON should both be  supported).
3. Move hard-coded emily and melanie list to a JSON file that is included in version control and that the entrypoint file loads by default.
4. Introduce basic Web API using Fast API with endpoints to show list of users and their favorite puzzles and show a single user, which support the GET methods
    - `/api/solvers/` -> List of all solvers
    - `/api/solvers/<solver>` -> List of puzzles the solver has submitted
5. Add "rating" to solver puzzle info
6. Implement Fast API GET methods for:
    - `/api/puzzles/` -> List of all puzzles
    - `/api/puzzles/<puzzle>` -> List of all ratings by solver for this puzzle
    - `/api/puzzles/<puzzle>/<solver>` -> Puzzle rating for this solver
7. Add basic unit tests around the existing API
8. Add API PATCH method to update a rating of a puzzle `/api/puzzles/<puzzle>/<solver>`
9. Add API POST and DELETE methods for `/api/puzzles/<puzzle>/<solver>`
10. Create "puzzles" DB in postgresql with a 1 table, "ratings" that has 3 fields:
    - solver (string)
    - puzzle (string)
    - rating (int)
11. Load data from default JSON into the table.
    - API to read from DB instead of file
    - POST/PATCH/DELETE should all result in DB updates
12. Add JSON schema file and validate the JSON against the schema before loading it into the DB.
13. On web server shutdown, save contents of db back to JSON file.
14. Add some "fixture integration/end-to-end" tests.
15. [Optional] Prettify the front-end with some basic HTML/Javascript.

Phase 2:

1. Add puzzle maker info
2. Add solver pages
3. Add login
4. Add + button (one at top of solver page)
5. Add edit button (per row in solver page)
6. Add delete button (per row in solver page)